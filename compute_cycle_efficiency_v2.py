from units import Q_
import numpy as np
from CoolProp.CoolProp import PropsSI
from th_functions import fluid_properties
from compute_required_area import fill_out_parameters

def compute_cycle_efficiency(loop_res, dP_core_primary=350e3):
    """ Calculates the SC-CO2 cycle efficiency based on the results of
    `compute_required_area` and `compute_loop_results`.
    The state points are defined as follows:
        Isobar: P_high = (2, 3, 5), P_low = (1, 4, 6)
        (1->2): Compressor Work
        (2->5): Recuperator cold -> hot
        (5->3): HX from Intermediate Loop
        (3->4): Turbine Work
        (4->6): Recuperator hot -> cold
        (6->1): Cooler
    """
    # yapf:disable
    # Get Loop Values
    ## Primary Loop
    primary_mdot = loop_res["Primary Mass Flow Rate (kg/s)"]
    primary_hot = Q_(loop_res["Primary Hot Temperature (C)"], 'degC').m_as('K')
    primary_cold = Q_(loop_res["Primary Cold Temperature (C)"], 'degC').m_as('K')
    primary_P = Q_(loop_res["Primary Pressure (kPa)"], 'kPa').m_as('Pa')
    primary_fluid = loop_res["Primary Fluid"]
    primary_avg_temperature = (primary_cold+primary_hot)/2
    primary_cp, primary_k, primary_rho, primary_mu = fluid_properties(primary_fluid, primary_avg_temperature, primary_P)
    ## Intermediate Loop
    intermediate_mdot = loop_res["Intermediate Mass Flow Rate (kg/s)"]
    intermediate_hot = Q_(loop_res["Intermediate Hot Temperature (C)"], 'degC').m_as('K')
    intermediate_cold = Q_(loop_res["Intermediate Cold Temperature (C)"], 'degC').m_as('K')
    intermediate_P = Q_(loop_res["Intermediate Pressure (kPa)"], 'kPa').m_as('Pa')
    intermediate_fluid = loop_res["Intermediate Fluid"]
    intermediate_avg_temperature = (intermediate_cold+intermediate_hot)/2
    intermediate_cp, intermediate_k, intermediate_rho, intermediate_mu = fluid_properties(intermediate_fluid, intermediate_avg_temperature, intermediate_P)
    ## Secondary Loop
    secondary_fluid = loop_res["Secondary Fluid"]
    secondary_hot = Q_(loop_res["Secondary Hot Temperature (C)"], 'degC').m_as('K')
    secondary_cold = Q_(loop_res["Secondary Cold Temperature (C)"], 'degC').m_as('K')
    secondary_min = Q_(loop_res["Secondary Minimum Temperature (C)"], 'degC').m_as('K')
    secondary_P_high = Q_(loop_res["Secondary Pressure (kPa)"], 'kPa').m_as('Pa')
    secondary_mdot = loop_res["Secondary Mass Flow Rate (kg/s)"]
    # Cycle Parameters
    Q_in = Q_(loop_res["Thermal Power (MW)"], 'MW').m_as('W')
    e_pump = loop_res["Pump/Compressor Efficiency"]
    e_turbine = loop_res["Turbine Efficiency"]
    compression_ratio = loop_res["Compression Ratio"]
    # yapf:enable

    # This function is designed to compute the energy lost due to the pump/compressor
    # and the electrical energy generated by the turbine, calculating cycle efficiency
    # by dividing the net power output by the thermal power input.
    if np.isnan(secondary_min):
        # State 2 is defined by the HX cold temperature and operating pressure,
        # and is immediately after exiting the pump/compressor
        P_2 = secondary_P_high
        T_2 = secondary_cold
        h_2 = PropsSI("H", "T", T_2, "P", P_2, secondary_fluid)

        # Calculate the pump/compressor power
        P_1 = P_2/compression_ratio
        if secondary_fluid == "Water" or secondary_fluid == "CarbonDioxide":
            # Approximate the fluid density with state 2
            rho = PropsSI("D", "T", T_2, "P", P_2, secondary_fluid)
            Q_pump_secondary = (secondary_mdot*(P_2-P_1)/rho)/e_pump
        elif secondary_fluid == "Air":
            C_v = PropsSI("O", "T", T_2, "P", P_2, secondary_fluid)
            C_p = PropsSI("C", "T", T_2, "P", P_2, secondary_fluid)
            gamma = C_p/C_v
            T_1 = T_2/(compression_ratio**((gamma-1)/(gamma)))
            h_1 = PropsSI("H", "T", T_1, "P", P_1, secondary_fluid)
            Q_pump_secondary = secondary_mdot*(h_2-h_1)/e_pump
    else:
        # State 1 is defined by the secondary minimum temperature and pressure
        P_1 = secondary_P_high/compression_ratio
        T_1 = secondary_min
        h_1 = PropsSI("H", "T", T_1, "P", P_1, secondary_fluid)
        s_1 = PropsSI("S", "T", T_1, "P", P_1, secondary_fluid)

        # Calculate the pump/compressor power
        P_2 = secondary_P_high
        if secondary_fluid == "Water" or secondary_fluid == "CarbonDioxide":
            # Approximate the fluid density with state 2
            h_2s = PropsSI("H", "S", s_1, "P", P_2, secondary_fluid)
            h_2 = h_1 + (h_2s-h_1)/e_pump
            T_2 = PropsSI("T", "H", h_2, "P", P_2, secondary_fluid)
            Q_pump_secondary = secondary_mdot*(h_2-h_1)/e_pump
        elif secondary_fluid == "Air":
            C_v = PropsSI("O", "T", T_1, "P", P_1, secondary_fluid)
            C_p = PropsSI("C", "T", T_1, "P", P_1, secondary_fluid)
            gamma = C_p/C_v
            T_2 = T_1*(compression_ratio**((gamma-1)/(gamma)))
            h_1 = PropsSI("H", "T", T_1, "P", P_1, secondary_fluid)
            Q_pump_secondary = secondary_mdot*(h_2-h_1)/e_pump

    # State 3 is defined by the HX hot temperature and operating pressure,
    # and is immediately before entering the turbine
    P_3 = P_2
    T_3 = secondary_hot
    h_3 = PropsSI("H", "T", T_3, "P", P_3, secondary_fluid)
    s_3 = PropsSI("S", "T", T_3, "P", P_3, secondary_fluid)

    # State 4 is immediately after exiting the turbine
    P_4 = P_1
    if secondary_fluid == "Water" or secondary_fluid == "CarbonDioxide":
        h_4s = PropsSI("H", "S", s_3, "P", P_1, secondary_fluid)
        h_4 = h_3 - (h_3-h_4s)*e_turbine
        T_4 = PropsSI("T", "H", h_4, "P", P_4, secondary_fluid)
        Q_turbine = secondary_mdot*(h_3-h_4)*e_turbine
    elif secondary_fluid == "Air":
        C_v = PropsSI("O", "T", T_3, "P", P_3, secondary_fluid)
        C_p = PropsSI("C", "T", T_3, "P", P_3, secondary_fluid)
        gamma = C_p/C_v
        T_4 = T_3/(compression_ratio**((gamma-1)/gamma))
        h_4 = PropsSI("H", "T", T_4, "P", P_4, secondary_fluid)
        Q_turbine = secondary_mdot*(h_3-h_4)*e_turbine

    # State 5 is Recuperator outlet to IHX (heated side)
    P_5 = P_2
    T_5 = secondary_cold
    if secondary_fluid == "Water" or secondary_fluid == "CarbonDioxide":
        h_5 = PropsSI("H", "T", T_5, "P", P_5, secondary_fluid)
        Q_recup = secondary_mdot*(h_5-h_2)
    # State 6 is Recuperator outlet to Cooler (cooled side)
    # Air cooler Conductance Area
    ## Based on [Held, et al. 2016] - assume Tair = [30 (in), 40 (out)] degC
    P_6 = P_1
    h_6 = h_4 - Q_recup/secondary_mdot
    T_6 = PropsSI("T", "H", h_6, "P", P_6, secondary_fluid)
    Q_cooler = secondary_mdot*(h_6-h_1)
    dT_cooler_hot = T_6 - (40+273.15) # Can potentially cause issues
    dT_cooler_cold = T_1 - (30+273.15)

    LMTD_cooler = (dT_cooler_hot-dT_cooler_cold)/np.log(
        dT_cooler_hot/dT_cooler_cold)
    UA_cooler = Q_cooler/LMTD_cooler

    # Recuperator Conductance Area
    dT_recup_hot = T_4 - T_6
    dT_recup_cold = T_5 - T_2
    LMTD_recup = (dT_recup_hot-dT_recup_cold)/np.log(dT_recup_hot/dT_recup_cold)
    UA_recup = Q_recup/LMTD_recup

    # Primary Loop Pump Work
    dP_primary = loop_res['Primary Total Pressure Drop (Pa)']
    Q_pump_primary = dP_primary*primary_mdot/primary_rho/e_pump

    # Intermediate Loop Pump Work
    dP_intermediate = loop_res['Intermediate Total Pressure Drop (Pa)']
    Q_pump_intermediate = dP_intermediate*intermediate_mdot/intermediate_rho/e_pump

    # Secondary Pump Work for pressure drop
    secondary_rho = PropsSI("D", "T", secondary_min, "P", P_1, secondary_fluid)
    dP_secondary = (loop_res['Secondary HX Pressure Drop (Pa)']
                    + loop_res['Secondary Pipe Pressure Drop (Pa)'])*2
    Q_pump_secondary += dP_secondary*secondary_mdot/secondary_rho/e_pump

    # Efficiency Calculation
    e_thermal = (Q_turbine-Q_pump_secondary)/Q_in
    e_cycle = (Q_turbine-Q_pump_primary-Q_pump_intermediate
               -Q_pump_secondary)/Q_in

    results = {}
    results["Primary Pump Power (MW)"] = Q_pump_primary/1e6
    results["Intermediate Pump Power (MW)"] = Q_pump_intermediate/1e6
    results["Compressor Power (MW)"] = Q_pump_secondary/1e6
    results["Turbine Power (MW)"] = Q_turbine/1e6
    results["Thermal Efficiency"] = e_thermal
    results["Cycle Efficiency"] = e_cycle
    results["Recuperator Conductance Area (W/K)"] = UA_recup
    results["Air Cooler Conductance Area (W/K)"] = UA_cooler
    return results
